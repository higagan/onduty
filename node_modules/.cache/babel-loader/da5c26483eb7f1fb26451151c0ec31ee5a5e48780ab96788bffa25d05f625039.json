{"ast":null,"code":"// src/contexts/AuthContext.js\nimport React,{createContext,useState}from'react';import hospitalsData from'../data/hospitals';import tasksData from'../data/tasks';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);// { username, type, hospitalName, hospitalId }\nconst[hospitals,setHospitals]=useState(hospitalsData);const[tasks,setTasks]=useState(tasksData);// Added setTasks to manage tasks\nconst[bookings,setBookings]=useState([]);// { bookingId, taskId, userId, bookingDetails }\n// Function to update user profile\nconst updateUserProfile=updatedData=>{setUser(prevUser=>({...prevUser,...updatedData}));};const register=data=>{// Mock registration logic\nconsole.log('Registered user:',data);if(data.type==='Doctor'){setUser({username:data.username,type:'Doctor'});}else if(data.type==='Hospital'){setUser({username:data.username,type:'Hospital'});}return true;};const completeHospitalRegistration=hospitalData=>{const newHospital={hospital_id:hospitals.length+1,name:hospitalData.name,address:hospitalData.address,about:hospitalData.about,contact:hospitalData.contact,added_date:new Date().toISOString(),image:hospitalData.image};setHospitals([...hospitals,newHospital]);setUser({username:newHospital.name,type:'Hospital',hospitalId:newHospital.hospital_id});return true;};const login=_ref2=>{let{username,password}=_ref2;// Mock login logic\nconsole.log('Logging in with:',username,password);const hospital=hospitals.find(h=>h.name.toLowerCase()===username.toLowerCase());if(hospital){setUser({username:hospital.name,type:'Hospital',hospitalId:hospital.hospital_id});return true;}else{setUser({username,type:'Doctor'});return true;}};const logout=()=>{setUser(null);};const bookTask=(taskId,bookingDetails)=>{const newBooking={bookingId:bookings.length+1,taskId,userId:user.type==='Doctor'?user.username:user.hospitalId,bookingDetails};setBookings([...bookings,newBooking]);// In a real app, update the backend accordingly\n};// Function to add a new task\nconst addTask=taskData=>{const newTask={task_id:tasks.length+1,hospital_id:user.hospitalId,// Associate task with the hospital\ndepartment:taskData.department,date:taskData.date,shift:taskData.shift,qualification:taskData.qualification// Add other necessary fields as needed\n};setTasks([...tasks,newTask]);return true;};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,setUser,updateUserProfile,register,login,logout,hospitals,tasks,bookTask,bookings,completeHospitalRegistration,addTask// Expose addTask to components\n},children:children});};","map":{"version":3,"names":["React","createContext","useState","hospitalsData","tasksData","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","hospitals","setHospitals","tasks","setTasks","bookings","setBookings","updateUserProfile","updatedData","prevUser","register","data","console","log","type","username","completeHospitalRegistration","hospitalData","newHospital","hospital_id","length","name","address","about","contact","added_date","Date","toISOString","image","hospitalId","login","_ref2","password","hospital","find","h","toLowerCase","logout","bookTask","taskId","bookingDetails","newBooking","bookingId","userId","addTask","taskData","newTask","task_id","department","date","shift","qualification","Provider","value"],"sources":["C:/Users/gagan/Documents/onduty-f-20240921T163350Z-001/onduty-f/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport React, { createContext, useState } from 'react';\r\nimport hospitalsData from '../data/hospitals';\r\nimport tasksData from '../data/tasks';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null); // { username, type, hospitalName, hospitalId }\r\n  const [hospitals, setHospitals] = useState(hospitalsData);\r\n  const [tasks, setTasks] = useState(tasksData); // Added setTasks to manage tasks\r\n  const [bookings, setBookings] = useState([]); // { bookingId, taskId, userId, bookingDetails }\r\n\r\n  // Function to update user profile\r\n  const updateUserProfile = (updatedData) => {\r\n    setUser((prevUser) => ({\r\n      ...prevUser,\r\n      ...updatedData,\r\n    }));\r\n  };\r\n\r\n  const register = (data) => {\r\n    // Mock registration logic\r\n    console.log('Registered user:', data);\r\n    if (data.type === 'Doctor') {\r\n      setUser({ username: data.username, type: 'Doctor' });\r\n    } else if (data.type === 'Hospital') {\r\n      setUser({ username: data.username, type: 'Hospital' });\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const completeHospitalRegistration = (hospitalData) => {\r\n    const newHospital = {\r\n      hospital_id: hospitals.length + 1,\r\n      name: hospitalData.name,\r\n      address: hospitalData.address,\r\n      about: hospitalData.about,\r\n      contact: hospitalData.contact,\r\n      added_date: new Date().toISOString(),\r\n      image: hospitalData.image,\r\n    };\r\n    setHospitals([...hospitals, newHospital]);\r\n    setUser({ username: newHospital.name, type: 'Hospital', hospitalId: newHospital.hospital_id });\r\n    return true;\r\n  };\r\n\r\n  const login = ({ username, password }) => {\r\n    // Mock login logic\r\n    console.log('Logging in with:', username, password);\r\n    const hospital = hospitals.find(h => h.name.toLowerCase() === username.toLowerCase());\r\n    if (hospital) {\r\n      setUser({ username: hospital.name, type: 'Hospital', hospitalId: hospital.hospital_id });\r\n      return true;\r\n    } else {\r\n      setUser({ username, type: 'Doctor' });\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  const bookTask = (taskId, bookingDetails) => {\r\n    const newBooking = {\r\n      bookingId: bookings.length + 1,\r\n      taskId,\r\n      userId: user.type === 'Doctor' ? user.username : user.hospitalId,\r\n      bookingDetails,\r\n    };\r\n    setBookings([...bookings, newBooking]);\r\n    // In a real app, update the backend accordingly\r\n  };\r\n\r\n  // Function to add a new task\r\n  const addTask = (taskData) => {\r\n    const newTask = {\r\n      task_id: tasks.length + 1,\r\n      hospital_id: user.hospitalId, // Associate task with the hospital\r\n      department: taskData.department,\r\n      date: taskData.date,\r\n      shift: taskData.shift,\r\n      qualification: taskData.qualification,\r\n      // Add other necessary fields as needed\r\n    };\r\n    setTasks([...tasks, newTask]);\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      setUser, \r\n      updateUserProfile, \r\n      register, \r\n      login, \r\n      logout, \r\n      hospitals, \r\n      tasks, \r\n      bookTask,\r\n      bookings,\r\n      completeHospitalRegistration,\r\n      addTask // Expose addTask to components\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}