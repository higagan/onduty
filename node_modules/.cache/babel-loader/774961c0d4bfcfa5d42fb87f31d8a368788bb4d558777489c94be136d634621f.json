{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gagan\\\\Documents\\\\onduty-f-20240921T163350Z-001\\\\onduty-f\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\n// src/contexts/AuthContext.js\nimport React, { createContext, useState } from 'react';\nimport hospitalsData from '../data/hospitals';\nimport tasksData from '../data/tasks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // { username, type, hospitalName, hospitalId }\n  const [hospitals, setHospitals] = useState(hospitalsData);\n  const [tasks, setTasks] = useState(tasksData); // Added setTasks to manage tasks\n  const [bookings, setBookings] = useState([]); // { bookingId, taskId, userId, bookingDetails }\n\n  // Function to update user profile\n  const updateUserProfile = updatedData => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...updatedData\n    }));\n  };\n  const register = data => {\n    // Mock registration logic\n    console.log('Registered user:', data);\n    if (data.type === 'Doctor') {\n      setUser({\n        username: data.username,\n        type: 'Doctor'\n      });\n    } else if (data.type === 'Hospital') {\n      setUser({\n        username: data.username,\n        type: 'Hospital'\n      });\n    }\n    return true;\n  };\n  const completeHospitalRegistration = hospitalData => {\n    const newHospital = {\n      hospital_id: hospitals.length + 1,\n      name: hospitalData.name,\n      address: hospitalData.address,\n      about: hospitalData.about,\n      contact: hospitalData.contact,\n      added_date: new Date().toISOString(),\n      image: hospitalData.image\n    };\n    setHospitals([...hospitals, newHospital]);\n    setUser({\n      username: newHospital.name,\n      type: 'Hospital',\n      hospitalId: newHospital.hospital_id\n    });\n    return true;\n  };\n  const login = ({\n    username,\n    password\n  }) => {\n    // Mock login logic\n    console.log('Logging in with:', username, password);\n    const hospital = hospitals.find(h => h.name.toLowerCase() === username.toLowerCase());\n    if (hospital) {\n      setUser({\n        username: hospital.name,\n        type: 'Hospital',\n        hospitalId: hospital.hospital_id\n      });\n      return true;\n    } else {\n      setUser({\n        username,\n        type: 'Doctor'\n      });\n      return true;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n  };\n  const bookTask = (taskId, bookingDetails) => {\n    const newBooking = {\n      bookingId: bookings.length + 1,\n      taskId,\n      userId: user.type === 'Doctor' ? user.username : user.hospitalId,\n      bookingDetails\n    };\n    setBookings([...bookings, newBooking]);\n    // In a real app, update the backend accordingly\n  };\n\n  // Function to add a new task\n  const addTask = taskData => {\n    const newTask = {\n      task_id: tasks.length + 1,\n      hospital_id: user.hospitalId,\n      // Associate task with the hospital\n      department: taskData.department,\n      date: taskData.date,\n      shift: taskData.shift,\n      qualification: taskData.qualification\n      // Add other necessary fields as needed\n    };\n    setTasks([...tasks, newTask]);\n    return true;\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      setUser,\n      updateUserProfile,\n      register,\n      login,\n      logout,\n      hospitals,\n      tasks,\n      bookTask,\n      bookings,\n      completeHospitalRegistration,\n      addTask // Expose addTask to components\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"ClpJPVQ7F+F3D+6IauOF6W5ABSw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","hospitalsData","tasksData","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","hospitals","setHospitals","tasks","setTasks","bookings","setBookings","updateUserProfile","updatedData","prevUser","register","data","console","log","type","username","completeHospitalRegistration","hospitalData","newHospital","hospital_id","length","name","address","about","contact","added_date","Date","toISOString","image","hospitalId","login","password","hospital","find","h","toLowerCase","logout","bookTask","taskId","bookingDetails","newBooking","bookingId","userId","addTask","taskData","newTask","task_id","department","date","shift","qualification","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gagan/Documents/onduty-f-20240921T163350Z-001/onduty-f/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport React, { createContext, useState } from 'react';\r\nimport hospitalsData from '../data/hospitals';\r\nimport tasksData from '../data/tasks';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null); // { username, type, hospitalName, hospitalId }\r\n  const [hospitals, setHospitals] = useState(hospitalsData);\r\n  const [tasks, setTasks] = useState(tasksData); // Added setTasks to manage tasks\r\n  const [bookings, setBookings] = useState([]); // { bookingId, taskId, userId, bookingDetails }\r\n\r\n  // Function to update user profile\r\n  const updateUserProfile = (updatedData) => {\r\n    setUser((prevUser) => ({\r\n      ...prevUser,\r\n      ...updatedData,\r\n    }));\r\n  };\r\n\r\n  const register = (data) => {\r\n    // Mock registration logic\r\n    console.log('Registered user:', data);\r\n    if (data.type === 'Doctor') {\r\n      setUser({ username: data.username, type: 'Doctor' });\r\n    } else if (data.type === 'Hospital') {\r\n      setUser({ username: data.username, type: 'Hospital' });\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const completeHospitalRegistration = (hospitalData) => {\r\n    const newHospital = {\r\n      hospital_id: hospitals.length + 1,\r\n      name: hospitalData.name,\r\n      address: hospitalData.address,\r\n      about: hospitalData.about,\r\n      contact: hospitalData.contact,\r\n      added_date: new Date().toISOString(),\r\n      image: hospitalData.image,\r\n    };\r\n    setHospitals([...hospitals, newHospital]);\r\n    setUser({ username: newHospital.name, type: 'Hospital', hospitalId: newHospital.hospital_id });\r\n    return true;\r\n  };\r\n\r\n  const login = ({ username, password }) => {\r\n    // Mock login logic\r\n    console.log('Logging in with:', username, password);\r\n    const hospital = hospitals.find(h => h.name.toLowerCase() === username.toLowerCase());\r\n    if (hospital) {\r\n      setUser({ username: hospital.name, type: 'Hospital', hospitalId: hospital.hospital_id });\r\n      return true;\r\n    } else {\r\n      setUser({ username, type: 'Doctor' });\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n  };\r\n\r\n  const bookTask = (taskId, bookingDetails) => {\r\n    const newBooking = {\r\n      bookingId: bookings.length + 1,\r\n      taskId,\r\n      userId: user.type === 'Doctor' ? user.username : user.hospitalId,\r\n      bookingDetails,\r\n    };\r\n    setBookings([...bookings, newBooking]);\r\n    // In a real app, update the backend accordingly\r\n  };\r\n\r\n  // Function to add a new task\r\n  const addTask = (taskData) => {\r\n    const newTask = {\r\n      task_id: tasks.length + 1,\r\n      hospital_id: user.hospitalId, // Associate task with the hospital\r\n      department: taskData.department,\r\n      date: taskData.date,\r\n      shift: taskData.shift,\r\n      qualification: taskData.qualification,\r\n      // Add other necessary fields as needed\r\n    };\r\n    setTasks([...tasks, newTask]);\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      setUser, \r\n      updateUserProfile, \r\n      register, \r\n      login, \r\n      logout, \r\n      hospitals, \r\n      tasks, \r\n      bookTask,\r\n      bookings,\r\n      completeHospitalRegistration,\r\n      addTask // Expose addTask to components\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}